// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.1
// source: v1/pipe/pipeline.proto

package pipe

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PipelineType int32

const (
	PipelineType_PIPELINE_TYPE_UNKNOWN PipelineType = 0
	PipelineType_SERVICES              PipelineType = 1
	PipelineType_SINGLE                PipelineType = 2
	PipelineType_TEMPLATE              PipelineType = 3
)

// Enum value maps for PipelineType.
var (
	PipelineType_name = map[int32]string{
		0: "PIPELINE_TYPE_UNKNOWN",
		1: "SERVICES",
		2: "SINGLE",
		3: "TEMPLATE",
	}
	PipelineType_value = map[string]int32{
		"PIPELINE_TYPE_UNKNOWN": 0,
		"SERVICES":              1,
		"SINGLE":                2,
		"TEMPLATE":              3,
	}
)

func (x PipelineType) Enum() *PipelineType {
	p := new(PipelineType)
	*p = x
	return p
}

func (x PipelineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_pipe_pipeline_proto_enumTypes[0].Descriptor()
}

func (PipelineType) Type() protoreflect.EnumType {
	return &file_v1_pipe_pipeline_proto_enumTypes[0]
}

func (x PipelineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineType.Descriptor instead.
func (PipelineType) EnumDescriptor() ([]byte, []int) {
	return file_v1_pipe_pipeline_proto_rawDescGZIP(), []int{0}
}

type Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"pipeline_id" yaml:"-"
	PipelineId string `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id" yaml:"-"`
	// @gotags: json:"pipeline_name" yaml:"pipeline_name" binding:"required"
	PipelineName string `protobuf:"bytes,2,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name" yaml:"pipeline_name" binding:"required"`
	// @gotags: json:"pipeline_type" yaml:"pipeline_type" binding:"required"
	PipelineType PipelineType `protobuf:"varint,3,opt,name=pipeline_type,json=pipelineType,proto3,enum=meta.v1.pipe.PipelineType" json:"pipeline_type" yaml:"pipeline_type" binding:"required"`
	// @gotags: json:"service_id" yaml:"service_id"
	ServiceId string `protobuf:"bytes,4,opt,name=service_id,json=serviceId,proto3" json:"service_id" yaml:"service_id"`
	// @gotags: json:"service_name" yaml:"service_name"
	ServiceName string `protobuf:"bytes,5,opt,name=service_name,json=serviceName,proto3" json:"service_name" yaml:"service_name"`
	// @gotags: json:"env_id" yaml:"env_id"
	EnvId string `protobuf:"bytes,6,opt,name=env_id,json=envId,proto3" json:"env_id" yaml:"env_id"`
	// @gotags: json:"env_name" yaml:"env_name"
	EnvName string `protobuf:"bytes,7,opt,name=env_name,json=envName,proto3" json:"env_name" yaml:"env_name"`
	// @gotags: json:"project_id" yaml:"project_id"
	ProjectId string `protobuf:"bytes,8,opt,name=project_id,json=projectId,proto3" json:"project_id" yaml:"project_id"`
	// @gotags: json:"project_name" yaml:"project_name"
	ProjectName string `protobuf:"bytes,9,opt,name=project_name,json=projectName,proto3" json:"project_name" yaml:"project_name"`
	// @gotags: json:"corpid" yaml:"-"
	Corpid string `protobuf:"bytes,10,opt,name=corpid,proto3" json:"corpid" yaml:"-"`
	// @gotags: json:"corp_name" yaml:"-"
	CorpName string `protobuf:"bytes,11,opt,name=corp_name,json=corpName,proto3" json:"corp_name" yaml:"-"`
	// @gotags: json:"pipeline_desc" yaml:"pipeline_desc"
	PipelineDesc string `protobuf:"bytes,12,opt,name=pipeline_desc,json=pipelineDesc,proto3" json:"pipeline_desc" yaml:"pipeline_desc"`
	// @gotags: json:"allow_parallel" yaml:"allow_parallel"
	AllowParallel bool `protobuf:"varint,13,opt,name=allow_parallel,json=allowParallel,proto3" json:"allow_parallel" yaml:"allow_parallel"`
	// @gotags: json:"allow_manual" yaml:"allow_manual"
	AllowManual bool `protobuf:"varint,14,opt,name=allow_manual,json=allowManual,proto3" json:"allow_manual" yaml:"allow_manual"`
	// @gotags: json:"allow_auto_cancel" yaml:"allow_auto_cancel"
	AllowAutoCancel bool `protobuf:"varint,15,opt,name=allow_auto_cancel,json=allowAutoCancel,proto3" json:"allow_auto_cancel" yaml:"allow_auto_cancel"`
	// @gotags: json:"allow_all_corp" yaml:"allow_all_corp"
	AllowAllCorp bool `protobuf:"varint,16,opt,name=allow_all_corp,json=allowAllCorp,proto3" json:"allow_all_corp" yaml:"allow_all_corp"`
	// @gotags: json:"allow_test" yaml:"allow_test"
	AllowTest bool `protobuf:"varint,17,opt,name=allow_test,json=allowTest,proto3" json:"allow_test" yaml:"allow_test"`
	// @gotags: json:"pipeline_star" yaml:"-"
	PipelineStar bool `protobuf:"varint,18,opt,name=pipeline_star,json=pipelineStar,proto3" json:"pipeline_star" yaml:"-"`
	// @gotags: json:"timeout" yaml:"timeout"
	Timeout int64 `protobuf:"varint,19,opt,name=timeout,proto3" json:"timeout" yaml:"timeout"`
	// @gotags: json:"pipeline_status" yaml:"-"
	PipelineStatus *PipelineStatus `protobuf:"bytes,20,opt,name=pipeline_status,json=pipelineStatus,proto3" json:"pipeline_status" yaml:"-"`
	// @gotags: json:"pipeline_hook" yaml:"pipeline_hook"
	PipelineHook *PipelineHook `protobuf:"bytes,21,opt,name=pipeline_hook,json=pipelineHook,proto3" json:"pipeline_hook" yaml:"pipeline_hook"`
	// @gotags: json:"pipeline_variables" yaml:"pipeline_variables"
	PipelineVariables []*Var `protobuf:"bytes,22,rep,name=pipeline_variables,json=pipelineVariables,proto3" json:"pipeline_variables" yaml:"pipeline_variables"`
	// @gotags: json:"pipeline_cache" yaml:"pipeline_cache"
	PipelineCache *PipelineCaches `protobuf:"bytes,23,opt,name=pipeline_cache,json=pipelineCache,proto3" json:"pipeline_cache" yaml:"pipeline_cache"`
	// @gotags: json:"pipeline_role" yaml:"pipeline_role"
	PipelineRole *PipelineRoles `protobuf:"bytes,24,opt,name=pipeline_role,json=pipelineRole,proto3" json:"pipeline_role" yaml:"pipeline_role"`
	// @gotags: json:"pipeline_jobs" yaml:"pipeline_jobs"
	PipelineJobs []*PipelineJob `protobuf:"bytes,25,rep,name=pipeline_jobs,json=pipelineJobs,proto3" json:"pipeline_jobs" yaml:"pipeline_jobs"`
	// @gotags: json:"create_by" yaml:"-"
	CreateBy string `protobuf:"bytes,26,opt,name=create_by,json=createBy,proto3" json:"create_by" yaml:"-"`
	// @gotags: json:"update_by" yaml:"-"
	UpdateBy string `protobuf:"bytes,27,opt,name=update_by,json=updateBy,proto3" json:"update_by" yaml:"-"`
	// @gotags: json:"create_time" yaml:"-"
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=create_time,json=createTime,proto3" json:"create_time" yaml:"-"`
	// @gotags: json:"update_time" yaml:"-"
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=update_time,json=updateTime,proto3" json:"update_time" yaml:"-"`
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_pipe_pipeline_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_v1_pipe_pipeline_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_v1_pipe_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *Pipeline) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *Pipeline) GetPipelineName() string {
	if x != nil {
		return x.PipelineName
	}
	return ""
}

func (x *Pipeline) GetPipelineType() PipelineType {
	if x != nil {
		return x.PipelineType
	}
	return PipelineType_PIPELINE_TYPE_UNKNOWN
}

func (x *Pipeline) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Pipeline) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Pipeline) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *Pipeline) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *Pipeline) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Pipeline) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Pipeline) GetCorpid() string {
	if x != nil {
		return x.Corpid
	}
	return ""
}

func (x *Pipeline) GetCorpName() string {
	if x != nil {
		return x.CorpName
	}
	return ""
}

func (x *Pipeline) GetPipelineDesc() string {
	if x != nil {
		return x.PipelineDesc
	}
	return ""
}

func (x *Pipeline) GetAllowParallel() bool {
	if x != nil {
		return x.AllowParallel
	}
	return false
}

func (x *Pipeline) GetAllowManual() bool {
	if x != nil {
		return x.AllowManual
	}
	return false
}

func (x *Pipeline) GetAllowAutoCancel() bool {
	if x != nil {
		return x.AllowAutoCancel
	}
	return false
}

func (x *Pipeline) GetAllowAllCorp() bool {
	if x != nil {
		return x.AllowAllCorp
	}
	return false
}

func (x *Pipeline) GetAllowTest() bool {
	if x != nil {
		return x.AllowTest
	}
	return false
}

func (x *Pipeline) GetPipelineStar() bool {
	if x != nil {
		return x.PipelineStar
	}
	return false
}

func (x *Pipeline) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Pipeline) GetPipelineStatus() *PipelineStatus {
	if x != nil {
		return x.PipelineStatus
	}
	return nil
}

func (x *Pipeline) GetPipelineHook() *PipelineHook {
	if x != nil {
		return x.PipelineHook
	}
	return nil
}

func (x *Pipeline) GetPipelineVariables() []*Var {
	if x != nil {
		return x.PipelineVariables
	}
	return nil
}

func (x *Pipeline) GetPipelineCache() *PipelineCaches {
	if x != nil {
		return x.PipelineCache
	}
	return nil
}

func (x *Pipeline) GetPipelineRole() *PipelineRoles {
	if x != nil {
		return x.PipelineRole
	}
	return nil
}

func (x *Pipeline) GetPipelineJobs() []*PipelineJob {
	if x != nil {
		return x.PipelineJobs
	}
	return nil
}

func (x *Pipeline) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *Pipeline) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *Pipeline) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Pipeline) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

var File_v1_pipe_pipeline_proto protoreflect.FileDescriptor

var file_v1_pipe_pipeline_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x70, 0x65,
	0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x2f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x76,
	0x31, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x76, 0x31, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x70,
	0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x09, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x65, 0x6e, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6e, 0x76, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x72, 0x70, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x72,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x6f, 0x72, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x72, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x54, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0d,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x52,
	0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x40, 0x0a,
	0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x52, 0x11, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x73, 0x52, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x51, 0x0a, 0x0c, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x49,
	0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x03, 0x42, 0x1f, 0x5a,
	0x1d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x6a, 0x2d, 0x73,
	0x68, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_pipe_pipeline_proto_rawDescOnce sync.Once
	file_v1_pipe_pipeline_proto_rawDescData = file_v1_pipe_pipeline_proto_rawDesc
)

func file_v1_pipe_pipeline_proto_rawDescGZIP() []byte {
	file_v1_pipe_pipeline_proto_rawDescOnce.Do(func() {
		file_v1_pipe_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_pipe_pipeline_proto_rawDescData)
	})
	return file_v1_pipe_pipeline_proto_rawDescData
}

var file_v1_pipe_pipeline_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_pipe_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_v1_pipe_pipeline_proto_goTypes = []interface{}{
	(PipelineType)(0),             // 0: meta.v1.pipe.PipelineType
	(*Pipeline)(nil),              // 1: meta.v1.pipe.Pipeline
	(*PipelineStatus)(nil),        // 2: meta.v1.pipe.PipelineStatus
	(*PipelineHook)(nil),          // 3: meta.v1.pipe.PipelineHook
	(*Var)(nil),                   // 4: meta.v1.pipe.Var
	(*PipelineCaches)(nil),        // 5: meta.v1.pipe.PipelineCaches
	(*PipelineRoles)(nil),         // 6: meta.v1.pipe.PipelineRoles
	(*PipelineJob)(nil),           // 7: meta.v1.pipe.PipelineJob
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_v1_pipe_pipeline_proto_depIdxs = []int32{
	0, // 0: meta.v1.pipe.Pipeline.pipeline_type:type_name -> meta.v1.pipe.PipelineType
	2, // 1: meta.v1.pipe.Pipeline.pipeline_status:type_name -> meta.v1.pipe.PipelineStatus
	3, // 2: meta.v1.pipe.Pipeline.pipeline_hook:type_name -> meta.v1.pipe.PipelineHook
	4, // 3: meta.v1.pipe.Pipeline.pipeline_variables:type_name -> meta.v1.pipe.Var
	5, // 4: meta.v1.pipe.Pipeline.pipeline_cache:type_name -> meta.v1.pipe.PipelineCaches
	6, // 5: meta.v1.pipe.Pipeline.pipeline_role:type_name -> meta.v1.pipe.PipelineRoles
	7, // 6: meta.v1.pipe.Pipeline.pipeline_jobs:type_name -> meta.v1.pipe.PipelineJob
	8, // 7: meta.v1.pipe.Pipeline.create_time:type_name -> google.protobuf.Timestamp
	8, // 8: meta.v1.pipe.Pipeline.update_time:type_name -> google.protobuf.Timestamp
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_v1_pipe_pipeline_proto_init() }
func file_v1_pipe_pipeline_proto_init() {
	if File_v1_pipe_pipeline_proto != nil {
		return
	}
	file_v1_pipe_pipeline_job_proto_init()
	file_v1_pipe_pipeline_vars_proto_init()
	file_v1_pipe_pipeline_hook_proto_init()
	file_v1_pipe_pipeline_cache_proto_init()
	file_v1_pipe_pipeline_role_proto_init()
	file_v1_pipe_pipeline_status_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_pipe_pipeline_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_pipe_pipeline_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_pipe_pipeline_proto_goTypes,
		DependencyIndexes: file_v1_pipe_pipeline_proto_depIdxs,
		EnumInfos:         file_v1_pipe_pipeline_proto_enumTypes,
		MessageInfos:      file_v1_pipe_pipeline_proto_msgTypes,
	}.Build()
	File_v1_pipe_pipeline_proto = out.File
	file_v1_pipe_pipeline_proto_rawDesc = nil
	file_v1_pipe_pipeline_proto_goTypes = nil
	file_v1_pipe_pipeline_proto_depIdxs = nil
}
