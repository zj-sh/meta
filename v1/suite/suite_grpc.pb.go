// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: v1/suite/suite.proto

package suite

import (
	context "context"
	base "github.com/zj-sh/meta/v1/base"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Suite_Inject_FullMethodName                        = "/meta.v1.suite.Suite/Inject"
	Suite_InjectConfig_FullMethodName                  = "/meta.v1.suite.Suite/InjectConfig"
	Suite_Options_FullMethodName                       = "/meta.v1.suite.Suite/Options"
	Suite_SourceClone_FullMethodName                   = "/meta.v1.suite.Suite/SourceClone"
	Suite_SourceCreate_FullMethodName                  = "/meta.v1.suite.Suite/SourceCreate"
	Suite_SourceMerge_FullMethodName                   = "/meta.v1.suite.Suite/SourceMerge"
	Suite_SourceAuthTypeOptions_FullMethodName         = "/meta.v1.suite.Suite/SourceAuthTypeOptions"
	Suite_SourceAuthUri_FullMethodName                 = "/meta.v1.suite.Suite/SourceAuthUri"
	Suite_SourceAuthAccessToken_FullMethodName         = "/meta.v1.suite.Suite/SourceAuthAccessToken"
	Suite_SourceAuthRefreshToken_FullMethodName        = "/meta.v1.suite.Suite/SourceAuthRefreshToken"
	Suite_SourceAuthSSHCredentialCreate_FullMethodName = "/meta.v1.suite.Suite/SourceAuthSSHCredentialCreate"
	Suite_SourceAuthSSHCredentialDelete_FullMethodName = "/meta.v1.suite.Suite/SourceAuthSSHCredentialDelete"
	Suite_SourceAuthRepoQuery_FullMethodName           = "/meta.v1.suite.Suite/SourceAuthRepoQuery"
	Suite_SourceAuthBranchQuery_FullMethodName         = "/meta.v1.suite.Suite/SourceAuthBranchQuery"
	Suite_SourceAuthTagQuery_FullMethodName            = "/meta.v1.suite.Suite/SourceAuthTagQuery"
	Suite_SourceAuthCommitQuery_FullMethodName         = "/meta.v1.suite.Suite/SourceAuthCommitQuery"
	Suite_SourceAuthWebhookCreate_FullMethodName       = "/meta.v1.suite.Suite/SourceAuthWebhookCreate"
	Suite_SourceAuthWebhookUpdate_FullMethodName       = "/meta.v1.suite.Suite/SourceAuthWebhookUpdate"
	Suite_SourceAuthWebhookDelete_FullMethodName       = "/meta.v1.suite.Suite/SourceAuthWebhookDelete"
	Suite_SourceScan_FullMethodName                    = "/meta.v1.suite.Suite/SourceScan"
	Suite_Config_FullMethodName                        = "/meta.v1.suite.Suite/Config"
	Suite_TestRun_FullMethodName                       = "/meta.v1.suite.Suite/TestRun"
	Suite_TestCancel_FullMethodName                    = "/meta.v1.suite.Suite/TestCancel"
	Suite_Build_FullMethodName                         = "/meta.v1.suite.Suite/Build"
	Suite_BuildMachine_FullMethodName                  = "/meta.v1.suite.Suite/BuildMachine"
	Suite_ImageBuild_FullMethodName                    = "/meta.v1.suite.Suite/ImageBuild"
	Suite_Deploy_FullMethodName                        = "/meta.v1.suite.Suite/Deploy"
	Suite_Version_FullMethodName                       = "/meta.v1.suite.Suite/Version"
	Suite_Notify_FullMethodName                        = "/meta.v1.suite.Suite/Notify"
	Suite_ApprovalSend_FullMethodName                  = "/meta.v1.suite.Suite/ApprovalSend"
	Suite_ApprovalCancel_FullMethodName                = "/meta.v1.suite.Suite/ApprovalCancel"
	Suite_StorageUploadStream_FullMethodName           = "/meta.v1.suite.Suite/StorageUploadStream"
	Suite_StorageUploadFile_FullMethodName             = "/meta.v1.suite.Suite/StorageUploadFile"
	Suite_StorageDelete_FullMethodName                 = "/meta.v1.suite.Suite/StorageDelete"
	Suite_ProductUploadStream_FullMethodName           = "/meta.v1.suite.Suite/ProductUploadStream"
	Suite_ProductUploadFile_FullMethodName             = "/meta.v1.suite.Suite/ProductUploadFile"
	Suite_ProductDelete_FullMethodName                 = "/meta.v1.suite.Suite/ProductDelete"
	Suite_ShellExec_FullMethodName                     = "/meta.v1.suite.Suite/ShellExec"
	Suite_Issues_FullMethodName                        = "/meta.v1.suite.Suite/Issues"
	Suite_OrgSync_FullMethodName                       = "/meta.v1.suite.Suite/OrgSync"
	Suite_OrgUserSync_FullMethodName                   = "/meta.v1.suite.Suite/OrgUserSync"
	Suite_Custom_FullMethodName                        = "/meta.v1.suite.Suite/Custom"
	Suite_PipeRun_FullMethodName                       = "/meta.v1.suite.Suite/PipeRun"
	Suite_PipeCancel_FullMethodName                    = "/meta.v1.suite.Suite/PipeCancel"
)

// SuiteClient is the client API for Suite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuiteClient interface {
	// 平台获取套件基本信息
	Inject(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SuiteInfo, error)
	// 平台注入套件配置
	InjectConfig(ctx context.Context, in *base.JsonString, opts ...grpc.CallOption) (*OutResponse, error)
	// 动态选项接口
	Options(ctx context.Context, in *SuiteApiOptionParam, opts ...grpc.CallOption) (*SuiteApiOptionResult, error)
	// *
	// 代码拉取接口
	// 支持 pipe.JobEffect_EFFECT_SOURCE_PULL 任务类型时，需要实现以下接口
	SourceClone(ctx context.Context, in *SourcePullCloneParam, opts ...grpc.CallOption) (Suite_SourceCloneClient, error)
	SourceCreate(ctx context.Context, in *SourcePullCreateParam, opts ...grpc.CallOption) (*OutResponse, error)
	SourceMerge(ctx context.Context, in *SourcePullMergeParam, opts ...grpc.CallOption) (*OutResponse, error)
	// *
	// 代码仓库认证接口
	// 支持 pipe.JobEffect_EFFECT_SOURCE_AUTH 任务类型时，需要实现以下接口
	SourceAuthTypeOptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SourceAuthTypeOptionResponse, error)
	SourceAuthUri(ctx context.Context, in *SourceAuthParam, opts ...grpc.CallOption) (*SourceAuthUriResponse, error)
	SourceAuthAccessToken(ctx context.Context, in *SourceAuthParam, opts ...grpc.CallOption) (*SourceAuthTokens, error)
	SourceAuthRefreshToken(ctx context.Context, in *SourceAuthTokens, opts ...grpc.CallOption) (*SourceAuthTokens, error)
	SourceAuthSSHCredentialCreate(ctx context.Context, in *SourceAuthSSHCredential, opts ...grpc.CallOption) (*SourceAuthSSHCredentialId, error)
	SourceAuthSSHCredentialDelete(ctx context.Context, in *SourceAuthSSHCredentialId, opts ...grpc.CallOption) (*OutResponse, error)
	SourceAuthRepoQuery(ctx context.Context, in *SourceAuthRepoQueryRequest, opts ...grpc.CallOption) (*SourceAuthRepoQueryResponse, error)
	SourceAuthBranchQuery(ctx context.Context, in *SourceAuthRepoFullName, opts ...grpc.CallOption) (*SourceAuthBranchTagQueryResponse, error)
	SourceAuthTagQuery(ctx context.Context, in *SourceAuthRepoFullName, opts ...grpc.CallOption) (*SourceAuthBranchTagQueryResponse, error)
	SourceAuthCommitQuery(ctx context.Context, in *SourceAuthRepoFullName, opts ...grpc.CallOption) (*SourceAuthCommitQueryResponse, error)
	SourceAuthWebhookCreate(ctx context.Context, in *SourceAuthWebhook, opts ...grpc.CallOption) (*SourceAuthWebhook, error)
	SourceAuthWebhookUpdate(ctx context.Context, in *SourceAuthWebhook, opts ...grpc.CallOption) (*OutResponse, error)
	SourceAuthWebhookDelete(ctx context.Context, in *SourceAuthWebhook, opts ...grpc.CallOption) (*OutResponse, error)
	// *
	// 代码扫描接口
	// 支持 pipe.JobEffect_EFFECT_SOURCE_SCAN 任务类型时，需要实现以下接口
	SourceScan(ctx context.Context, in *SourceScanParam, opts ...grpc.CallOption) (Suite_SourceScanClient, error)
	// *
	// 配置管理接口
	// 支持 pipe.JobEffect_EFFECT_CONFIG 任务类型时，需要实现以下接口
	Config(ctx context.Context, in *ConfigParams, opts ...grpc.CallOption) (*OutResponse, error)
	// *
	// 测试接口
	// 支持 pipe.JobEffect_EFFECT_TEST 任务类型时，需要实现以下接口
	TestRun(ctx context.Context, in *TestRunParam, opts ...grpc.CallOption) (Suite_TestRunClient, error)
	TestCancel(ctx context.Context, in *TestCancelParam, opts ...grpc.CallOption) (*OutResponse, error)
	// *
	// 构建接口
	// 支持 pipe.JobEffect_EFFECT_BUILD 任务类型时，需要实现以下接口
	Build(ctx context.Context, in *BuildParam, opts ...grpc.CallOption) (Suite_BuildClient, error)
	// 反向命令执行接口, 当build_type为BUILD_TYPE_BUILD_MACHINE时会监听此接口
	BuildMachine(ctx context.Context, opts ...grpc.CallOption) (Suite_BuildMachineClient, error)
	// *
	// 镜像接口
	// 支持 pipe.JobEffect_EFFECT_IMAGE 任务类型时，需要实现以下接口
	ImageBuild(ctx context.Context, in *ImageBuildParam, opts ...grpc.CallOption) (Suite_ImageBuildClient, error)
	// *
	// 部署接口
	// 支持 pipe.JobEffect_EFFECT_DEPLOY 任务类型时，需要实现以下接口
	Deploy(ctx context.Context, in *DeployParam, opts ...grpc.CallOption) (Suite_DeployClient, error)
	// *
	// 版本接口
	// 支持 pipe.JobEffect_EFFECT_VERSION 任务类型时，需要实现以下接口
	Version(ctx context.Context, in *VersionParam, opts ...grpc.CallOption) (*OutResponse, error)
	// *
	// 通知接口
	// 支持 pipe.JobEffect_EFFECT_NOTIFY 任务类型时，需要实现以下接口
	Notify(ctx context.Context, in *NotifyParam, opts ...grpc.CallOption) (*OutResponse, error)
	// *
	// 审批接口
	// 支持 pipe.JobEffect_EFFECT_APPROVAL 任务类型时，需要实现以下接口
	ApprovalSend(ctx context.Context, in *ApprovalSendParam, opts ...grpc.CallOption) (*ApprovalSendResponse, error)
	ApprovalCancel(ctx context.Context, in *ApprovalCancelParam, opts ...grpc.CallOption) (*OutResponse, error)
	// *
	// 存储接口
	// 支持 pipe.JobEffect_EFFECT_STORAGE 任务类型时，需要实现以下接口
	StorageUploadStream(ctx context.Context, opts ...grpc.CallOption) (Suite_StorageUploadStreamClient, error)
	StorageUploadFile(ctx context.Context, in *StorageUploadFileParam, opts ...grpc.CallOption) (*StorageUploadResponse, error)
	StorageDelete(ctx context.Context, in *StorageDeleteParam, opts ...grpc.CallOption) (*OutResponse, error)
	// *
	// 制品接口
	// 支持 pipe.JobEffect_EFFECT_PRODUCT 任务类型时，需要实现以下接口
	ProductUploadStream(ctx context.Context, opts ...grpc.CallOption) (Suite_ProductUploadStreamClient, error)
	ProductUploadFile(ctx context.Context, in *ProductUploadFileParam, opts ...grpc.CallOption) (*ProductUploadResponse, error)
	ProductDelete(ctx context.Context, in *ProductDeleteParam, opts ...grpc.CallOption) (*OutResponse, error)
	// *
	// 脚本接口
	// 支持 pipe.JobEffect_EFFECT_SHELL 任务类型时，需要实现以下接口
	ShellExec(ctx context.Context, opts ...grpc.CallOption) (Suite_ShellExecClient, error)
	// *
	// 协同接口
	// 支持 pipe.JobEffect_EFFECT_ISSUES 任务类型时，需要实现以下接口
	Issues(ctx context.Context, in *IssuesParam, opts ...grpc.CallOption) (*OutResponse, error)
	// *
	// 组织架构同步接口
	// 支持 pipe.JobEffect_EFFECT_ORG 任务类型时，需要实现以下接口
	OrgSync(ctx context.Context, in *OrgParam, opts ...grpc.CallOption) (*OrgResponse, error)
	OrgUserSync(ctx context.Context, in *OrgUserParam, opts ...grpc.CallOption) (*OrgUserResponse, error)
	// *
	// 自定义接口
	// 支持 pipe.JobEffect_EFFECT_CUSTOM 任务类型时，需要实现以下接口
	Custom(ctx context.Context, in *CustomParam, opts ...grpc.CallOption) (Suite_CustomClient, error)
	// *
	// 流水线接口
	// 支持 pipe.JobEffect_EFFECT_PIPE 任务类型时，需要实现以下接口
	PipeRun(ctx context.Context, in *PipelineRunParam, opts ...grpc.CallOption) (*PipelineRunResponse, error)
	PipeCancel(ctx context.Context, in *PipelineCancelParam, opts ...grpc.CallOption) (*OutResponse, error)
}

type suiteClient struct {
	cc grpc.ClientConnInterface
}

func NewSuiteClient(cc grpc.ClientConnInterface) SuiteClient {
	return &suiteClient{cc}
}

func (c *suiteClient) Inject(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SuiteInfo, error) {
	out := new(SuiteInfo)
	err := c.cc.Invoke(ctx, Suite_Inject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) InjectConfig(ctx context.Context, in *base.JsonString, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_InjectConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) Options(ctx context.Context, in *SuiteApiOptionParam, opts ...grpc.CallOption) (*SuiteApiOptionResult, error) {
	out := new(SuiteApiOptionResult)
	err := c.cc.Invoke(ctx, Suite_Options_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceClone(ctx context.Context, in *SourcePullCloneParam, opts ...grpc.CallOption) (Suite_SourceCloneClient, error) {
	stream, err := c.cc.NewStream(ctx, &Suite_ServiceDesc.Streams[0], Suite_SourceClone_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &suiteSourceCloneClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Suite_SourceCloneClient interface {
	Recv() (*SourcePullResponse, error)
	grpc.ClientStream
}

type suiteSourceCloneClient struct {
	grpc.ClientStream
}

func (x *suiteSourceCloneClient) Recv() (*SourcePullResponse, error) {
	m := new(SourcePullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *suiteClient) SourceCreate(ctx context.Context, in *SourcePullCreateParam, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_SourceCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceMerge(ctx context.Context, in *SourcePullMergeParam, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_SourceMerge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceAuthTypeOptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SourceAuthTypeOptionResponse, error) {
	out := new(SourceAuthTypeOptionResponse)
	err := c.cc.Invoke(ctx, Suite_SourceAuthTypeOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceAuthUri(ctx context.Context, in *SourceAuthParam, opts ...grpc.CallOption) (*SourceAuthUriResponse, error) {
	out := new(SourceAuthUriResponse)
	err := c.cc.Invoke(ctx, Suite_SourceAuthUri_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceAuthAccessToken(ctx context.Context, in *SourceAuthParam, opts ...grpc.CallOption) (*SourceAuthTokens, error) {
	out := new(SourceAuthTokens)
	err := c.cc.Invoke(ctx, Suite_SourceAuthAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceAuthRefreshToken(ctx context.Context, in *SourceAuthTokens, opts ...grpc.CallOption) (*SourceAuthTokens, error) {
	out := new(SourceAuthTokens)
	err := c.cc.Invoke(ctx, Suite_SourceAuthRefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceAuthSSHCredentialCreate(ctx context.Context, in *SourceAuthSSHCredential, opts ...grpc.CallOption) (*SourceAuthSSHCredentialId, error) {
	out := new(SourceAuthSSHCredentialId)
	err := c.cc.Invoke(ctx, Suite_SourceAuthSSHCredentialCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceAuthSSHCredentialDelete(ctx context.Context, in *SourceAuthSSHCredentialId, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_SourceAuthSSHCredentialDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceAuthRepoQuery(ctx context.Context, in *SourceAuthRepoQueryRequest, opts ...grpc.CallOption) (*SourceAuthRepoQueryResponse, error) {
	out := new(SourceAuthRepoQueryResponse)
	err := c.cc.Invoke(ctx, Suite_SourceAuthRepoQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceAuthBranchQuery(ctx context.Context, in *SourceAuthRepoFullName, opts ...grpc.CallOption) (*SourceAuthBranchTagQueryResponse, error) {
	out := new(SourceAuthBranchTagQueryResponse)
	err := c.cc.Invoke(ctx, Suite_SourceAuthBranchQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceAuthTagQuery(ctx context.Context, in *SourceAuthRepoFullName, opts ...grpc.CallOption) (*SourceAuthBranchTagQueryResponse, error) {
	out := new(SourceAuthBranchTagQueryResponse)
	err := c.cc.Invoke(ctx, Suite_SourceAuthTagQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceAuthCommitQuery(ctx context.Context, in *SourceAuthRepoFullName, opts ...grpc.CallOption) (*SourceAuthCommitQueryResponse, error) {
	out := new(SourceAuthCommitQueryResponse)
	err := c.cc.Invoke(ctx, Suite_SourceAuthCommitQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceAuthWebhookCreate(ctx context.Context, in *SourceAuthWebhook, opts ...grpc.CallOption) (*SourceAuthWebhook, error) {
	out := new(SourceAuthWebhook)
	err := c.cc.Invoke(ctx, Suite_SourceAuthWebhookCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceAuthWebhookUpdate(ctx context.Context, in *SourceAuthWebhook, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_SourceAuthWebhookUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceAuthWebhookDelete(ctx context.Context, in *SourceAuthWebhook, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_SourceAuthWebhookDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) SourceScan(ctx context.Context, in *SourceScanParam, opts ...grpc.CallOption) (Suite_SourceScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &Suite_ServiceDesc.Streams[1], Suite_SourceScan_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &suiteSourceScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Suite_SourceScanClient interface {
	Recv() (*SourceScanResponse, error)
	grpc.ClientStream
}

type suiteSourceScanClient struct {
	grpc.ClientStream
}

func (x *suiteSourceScanClient) Recv() (*SourceScanResponse, error) {
	m := new(SourceScanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *suiteClient) Config(ctx context.Context, in *ConfigParams, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_Config_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) TestRun(ctx context.Context, in *TestRunParam, opts ...grpc.CallOption) (Suite_TestRunClient, error) {
	stream, err := c.cc.NewStream(ctx, &Suite_ServiceDesc.Streams[2], Suite_TestRun_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &suiteTestRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Suite_TestRunClient interface {
	Recv() (*TestRunResponse, error)
	grpc.ClientStream
}

type suiteTestRunClient struct {
	grpc.ClientStream
}

func (x *suiteTestRunClient) Recv() (*TestRunResponse, error) {
	m := new(TestRunResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *suiteClient) TestCancel(ctx context.Context, in *TestCancelParam, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_TestCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) Build(ctx context.Context, in *BuildParam, opts ...grpc.CallOption) (Suite_BuildClient, error) {
	stream, err := c.cc.NewStream(ctx, &Suite_ServiceDesc.Streams[3], Suite_Build_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &suiteBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Suite_BuildClient interface {
	Recv() (*BuildResponse, error)
	grpc.ClientStream
}

type suiteBuildClient struct {
	grpc.ClientStream
}

func (x *suiteBuildClient) Recv() (*BuildResponse, error) {
	m := new(BuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *suiteClient) BuildMachine(ctx context.Context, opts ...grpc.CallOption) (Suite_BuildMachineClient, error) {
	stream, err := c.cc.NewStream(ctx, &Suite_ServiceDesc.Streams[4], Suite_BuildMachine_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &suiteBuildMachineClient{stream}
	return x, nil
}

type Suite_BuildMachineClient interface {
	Send(*BuildMachineResponse) error
	Recv() (*BuildMachineParam, error)
	grpc.ClientStream
}

type suiteBuildMachineClient struct {
	grpc.ClientStream
}

func (x *suiteBuildMachineClient) Send(m *BuildMachineResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *suiteBuildMachineClient) Recv() (*BuildMachineParam, error) {
	m := new(BuildMachineParam)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *suiteClient) ImageBuild(ctx context.Context, in *ImageBuildParam, opts ...grpc.CallOption) (Suite_ImageBuildClient, error) {
	stream, err := c.cc.NewStream(ctx, &Suite_ServiceDesc.Streams[5], Suite_ImageBuild_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &suiteImageBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Suite_ImageBuildClient interface {
	Recv() (*ImageBuildResponse, error)
	grpc.ClientStream
}

type suiteImageBuildClient struct {
	grpc.ClientStream
}

func (x *suiteImageBuildClient) Recv() (*ImageBuildResponse, error) {
	m := new(ImageBuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *suiteClient) Deploy(ctx context.Context, in *DeployParam, opts ...grpc.CallOption) (Suite_DeployClient, error) {
	stream, err := c.cc.NewStream(ctx, &Suite_ServiceDesc.Streams[6], Suite_Deploy_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &suiteDeployClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Suite_DeployClient interface {
	Recv() (*DeployResponse, error)
	grpc.ClientStream
}

type suiteDeployClient struct {
	grpc.ClientStream
}

func (x *suiteDeployClient) Recv() (*DeployResponse, error) {
	m := new(DeployResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *suiteClient) Version(ctx context.Context, in *VersionParam, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) Notify(ctx context.Context, in *NotifyParam, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_Notify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) ApprovalSend(ctx context.Context, in *ApprovalSendParam, opts ...grpc.CallOption) (*ApprovalSendResponse, error) {
	out := new(ApprovalSendResponse)
	err := c.cc.Invoke(ctx, Suite_ApprovalSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) ApprovalCancel(ctx context.Context, in *ApprovalCancelParam, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_ApprovalCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) StorageUploadStream(ctx context.Context, opts ...grpc.CallOption) (Suite_StorageUploadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Suite_ServiceDesc.Streams[7], Suite_StorageUploadStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &suiteStorageUploadStreamClient{stream}
	return x, nil
}

type Suite_StorageUploadStreamClient interface {
	Send(*StorageUploadStreamParam) error
	Recv() (*StorageUploadResponse, error)
	grpc.ClientStream
}

type suiteStorageUploadStreamClient struct {
	grpc.ClientStream
}

func (x *suiteStorageUploadStreamClient) Send(m *StorageUploadStreamParam) error {
	return x.ClientStream.SendMsg(m)
}

func (x *suiteStorageUploadStreamClient) Recv() (*StorageUploadResponse, error) {
	m := new(StorageUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *suiteClient) StorageUploadFile(ctx context.Context, in *StorageUploadFileParam, opts ...grpc.CallOption) (*StorageUploadResponse, error) {
	out := new(StorageUploadResponse)
	err := c.cc.Invoke(ctx, Suite_StorageUploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) StorageDelete(ctx context.Context, in *StorageDeleteParam, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_StorageDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) ProductUploadStream(ctx context.Context, opts ...grpc.CallOption) (Suite_ProductUploadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Suite_ServiceDesc.Streams[8], Suite_ProductUploadStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &suiteProductUploadStreamClient{stream}
	return x, nil
}

type Suite_ProductUploadStreamClient interface {
	Send(*ProductUploadStreamParam) error
	Recv() (*ProductUploadResponse, error)
	grpc.ClientStream
}

type suiteProductUploadStreamClient struct {
	grpc.ClientStream
}

func (x *suiteProductUploadStreamClient) Send(m *ProductUploadStreamParam) error {
	return x.ClientStream.SendMsg(m)
}

func (x *suiteProductUploadStreamClient) Recv() (*ProductUploadResponse, error) {
	m := new(ProductUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *suiteClient) ProductUploadFile(ctx context.Context, in *ProductUploadFileParam, opts ...grpc.CallOption) (*ProductUploadResponse, error) {
	out := new(ProductUploadResponse)
	err := c.cc.Invoke(ctx, Suite_ProductUploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) ProductDelete(ctx context.Context, in *ProductDeleteParam, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_ProductDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) ShellExec(ctx context.Context, opts ...grpc.CallOption) (Suite_ShellExecClient, error) {
	stream, err := c.cc.NewStream(ctx, &Suite_ServiceDesc.Streams[9], Suite_ShellExec_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &suiteShellExecClient{stream}
	return x, nil
}

type Suite_ShellExecClient interface {
	Send(*ShellExecParam) error
	Recv() (*ShellExecResponse, error)
	grpc.ClientStream
}

type suiteShellExecClient struct {
	grpc.ClientStream
}

func (x *suiteShellExecClient) Send(m *ShellExecParam) error {
	return x.ClientStream.SendMsg(m)
}

func (x *suiteShellExecClient) Recv() (*ShellExecResponse, error) {
	m := new(ShellExecResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *suiteClient) Issues(ctx context.Context, in *IssuesParam, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_Issues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) OrgSync(ctx context.Context, in *OrgParam, opts ...grpc.CallOption) (*OrgResponse, error) {
	out := new(OrgResponse)
	err := c.cc.Invoke(ctx, Suite_OrgSync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) OrgUserSync(ctx context.Context, in *OrgUserParam, opts ...grpc.CallOption) (*OrgUserResponse, error) {
	out := new(OrgUserResponse)
	err := c.cc.Invoke(ctx, Suite_OrgUserSync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) Custom(ctx context.Context, in *CustomParam, opts ...grpc.CallOption) (Suite_CustomClient, error) {
	stream, err := c.cc.NewStream(ctx, &Suite_ServiceDesc.Streams[10], Suite_Custom_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &suiteCustomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Suite_CustomClient interface {
	Recv() (*CustomResponse, error)
	grpc.ClientStream
}

type suiteCustomClient struct {
	grpc.ClientStream
}

func (x *suiteCustomClient) Recv() (*CustomResponse, error) {
	m := new(CustomResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *suiteClient) PipeRun(ctx context.Context, in *PipelineRunParam, opts ...grpc.CallOption) (*PipelineRunResponse, error) {
	out := new(PipelineRunResponse)
	err := c.cc.Invoke(ctx, Suite_PipeRun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteClient) PipeCancel(ctx context.Context, in *PipelineCancelParam, opts ...grpc.CallOption) (*OutResponse, error) {
	out := new(OutResponse)
	err := c.cc.Invoke(ctx, Suite_PipeCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuiteServer is the server API for Suite service.
// All implementations must embed UnimplementedSuiteServer
// for forward compatibility
type SuiteServer interface {
	// 平台获取套件基本信息
	Inject(context.Context, *emptypb.Empty) (*SuiteInfo, error)
	// 平台注入套件配置
	InjectConfig(context.Context, *base.JsonString) (*OutResponse, error)
	// 动态选项接口
	Options(context.Context, *SuiteApiOptionParam) (*SuiteApiOptionResult, error)
	// *
	// 代码拉取接口
	// 支持 pipe.JobEffect_EFFECT_SOURCE_PULL 任务类型时，需要实现以下接口
	SourceClone(*SourcePullCloneParam, Suite_SourceCloneServer) error
	SourceCreate(context.Context, *SourcePullCreateParam) (*OutResponse, error)
	SourceMerge(context.Context, *SourcePullMergeParam) (*OutResponse, error)
	// *
	// 代码仓库认证接口
	// 支持 pipe.JobEffect_EFFECT_SOURCE_AUTH 任务类型时，需要实现以下接口
	SourceAuthTypeOptions(context.Context, *emptypb.Empty) (*SourceAuthTypeOptionResponse, error)
	SourceAuthUri(context.Context, *SourceAuthParam) (*SourceAuthUriResponse, error)
	SourceAuthAccessToken(context.Context, *SourceAuthParam) (*SourceAuthTokens, error)
	SourceAuthRefreshToken(context.Context, *SourceAuthTokens) (*SourceAuthTokens, error)
	SourceAuthSSHCredentialCreate(context.Context, *SourceAuthSSHCredential) (*SourceAuthSSHCredentialId, error)
	SourceAuthSSHCredentialDelete(context.Context, *SourceAuthSSHCredentialId) (*OutResponse, error)
	SourceAuthRepoQuery(context.Context, *SourceAuthRepoQueryRequest) (*SourceAuthRepoQueryResponse, error)
	SourceAuthBranchQuery(context.Context, *SourceAuthRepoFullName) (*SourceAuthBranchTagQueryResponse, error)
	SourceAuthTagQuery(context.Context, *SourceAuthRepoFullName) (*SourceAuthBranchTagQueryResponse, error)
	SourceAuthCommitQuery(context.Context, *SourceAuthRepoFullName) (*SourceAuthCommitQueryResponse, error)
	SourceAuthWebhookCreate(context.Context, *SourceAuthWebhook) (*SourceAuthWebhook, error)
	SourceAuthWebhookUpdate(context.Context, *SourceAuthWebhook) (*OutResponse, error)
	SourceAuthWebhookDelete(context.Context, *SourceAuthWebhook) (*OutResponse, error)
	// *
	// 代码扫描接口
	// 支持 pipe.JobEffect_EFFECT_SOURCE_SCAN 任务类型时，需要实现以下接口
	SourceScan(*SourceScanParam, Suite_SourceScanServer) error
	// *
	// 配置管理接口
	// 支持 pipe.JobEffect_EFFECT_CONFIG 任务类型时，需要实现以下接口
	Config(context.Context, *ConfigParams) (*OutResponse, error)
	// *
	// 测试接口
	// 支持 pipe.JobEffect_EFFECT_TEST 任务类型时，需要实现以下接口
	TestRun(*TestRunParam, Suite_TestRunServer) error
	TestCancel(context.Context, *TestCancelParam) (*OutResponse, error)
	// *
	// 构建接口
	// 支持 pipe.JobEffect_EFFECT_BUILD 任务类型时，需要实现以下接口
	Build(*BuildParam, Suite_BuildServer) error
	// 反向命令执行接口, 当build_type为BUILD_TYPE_BUILD_MACHINE时会监听此接口
	BuildMachine(Suite_BuildMachineServer) error
	// *
	// 镜像接口
	// 支持 pipe.JobEffect_EFFECT_IMAGE 任务类型时，需要实现以下接口
	ImageBuild(*ImageBuildParam, Suite_ImageBuildServer) error
	// *
	// 部署接口
	// 支持 pipe.JobEffect_EFFECT_DEPLOY 任务类型时，需要实现以下接口
	Deploy(*DeployParam, Suite_DeployServer) error
	// *
	// 版本接口
	// 支持 pipe.JobEffect_EFFECT_VERSION 任务类型时，需要实现以下接口
	Version(context.Context, *VersionParam) (*OutResponse, error)
	// *
	// 通知接口
	// 支持 pipe.JobEffect_EFFECT_NOTIFY 任务类型时，需要实现以下接口
	Notify(context.Context, *NotifyParam) (*OutResponse, error)
	// *
	// 审批接口
	// 支持 pipe.JobEffect_EFFECT_APPROVAL 任务类型时，需要实现以下接口
	ApprovalSend(context.Context, *ApprovalSendParam) (*ApprovalSendResponse, error)
	ApprovalCancel(context.Context, *ApprovalCancelParam) (*OutResponse, error)
	// *
	// 存储接口
	// 支持 pipe.JobEffect_EFFECT_STORAGE 任务类型时，需要实现以下接口
	StorageUploadStream(Suite_StorageUploadStreamServer) error
	StorageUploadFile(context.Context, *StorageUploadFileParam) (*StorageUploadResponse, error)
	StorageDelete(context.Context, *StorageDeleteParam) (*OutResponse, error)
	// *
	// 制品接口
	// 支持 pipe.JobEffect_EFFECT_PRODUCT 任务类型时，需要实现以下接口
	ProductUploadStream(Suite_ProductUploadStreamServer) error
	ProductUploadFile(context.Context, *ProductUploadFileParam) (*ProductUploadResponse, error)
	ProductDelete(context.Context, *ProductDeleteParam) (*OutResponse, error)
	// *
	// 脚本接口
	// 支持 pipe.JobEffect_EFFECT_SHELL 任务类型时，需要实现以下接口
	ShellExec(Suite_ShellExecServer) error
	// *
	// 协同接口
	// 支持 pipe.JobEffect_EFFECT_ISSUES 任务类型时，需要实现以下接口
	Issues(context.Context, *IssuesParam) (*OutResponse, error)
	// *
	// 组织架构同步接口
	// 支持 pipe.JobEffect_EFFECT_ORG 任务类型时，需要实现以下接口
	OrgSync(context.Context, *OrgParam) (*OrgResponse, error)
	OrgUserSync(context.Context, *OrgUserParam) (*OrgUserResponse, error)
	// *
	// 自定义接口
	// 支持 pipe.JobEffect_EFFECT_CUSTOM 任务类型时，需要实现以下接口
	Custom(*CustomParam, Suite_CustomServer) error
	// *
	// 流水线接口
	// 支持 pipe.JobEffect_EFFECT_PIPE 任务类型时，需要实现以下接口
	PipeRun(context.Context, *PipelineRunParam) (*PipelineRunResponse, error)
	PipeCancel(context.Context, *PipelineCancelParam) (*OutResponse, error)
	mustEmbedUnimplementedSuiteServer()
}

// UnimplementedSuiteServer must be embedded to have forward compatible implementations.
type UnimplementedSuiteServer struct {
}

func (UnimplementedSuiteServer) Inject(context.Context, *emptypb.Empty) (*SuiteInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inject not implemented")
}
func (UnimplementedSuiteServer) InjectConfig(context.Context, *base.JsonString) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InjectConfig not implemented")
}
func (UnimplementedSuiteServer) Options(context.Context, *SuiteApiOptionParam) (*SuiteApiOptionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedSuiteServer) SourceClone(*SourcePullCloneParam, Suite_SourceCloneServer) error {
	return status.Errorf(codes.Unimplemented, "method SourceClone not implemented")
}
func (UnimplementedSuiteServer) SourceCreate(context.Context, *SourcePullCreateParam) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceCreate not implemented")
}
func (UnimplementedSuiteServer) SourceMerge(context.Context, *SourcePullMergeParam) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceMerge not implemented")
}
func (UnimplementedSuiteServer) SourceAuthTypeOptions(context.Context, *emptypb.Empty) (*SourceAuthTypeOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceAuthTypeOptions not implemented")
}
func (UnimplementedSuiteServer) SourceAuthUri(context.Context, *SourceAuthParam) (*SourceAuthUriResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceAuthUri not implemented")
}
func (UnimplementedSuiteServer) SourceAuthAccessToken(context.Context, *SourceAuthParam) (*SourceAuthTokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceAuthAccessToken not implemented")
}
func (UnimplementedSuiteServer) SourceAuthRefreshToken(context.Context, *SourceAuthTokens) (*SourceAuthTokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceAuthRefreshToken not implemented")
}
func (UnimplementedSuiteServer) SourceAuthSSHCredentialCreate(context.Context, *SourceAuthSSHCredential) (*SourceAuthSSHCredentialId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceAuthSSHCredentialCreate not implemented")
}
func (UnimplementedSuiteServer) SourceAuthSSHCredentialDelete(context.Context, *SourceAuthSSHCredentialId) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceAuthSSHCredentialDelete not implemented")
}
func (UnimplementedSuiteServer) SourceAuthRepoQuery(context.Context, *SourceAuthRepoQueryRequest) (*SourceAuthRepoQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceAuthRepoQuery not implemented")
}
func (UnimplementedSuiteServer) SourceAuthBranchQuery(context.Context, *SourceAuthRepoFullName) (*SourceAuthBranchTagQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceAuthBranchQuery not implemented")
}
func (UnimplementedSuiteServer) SourceAuthTagQuery(context.Context, *SourceAuthRepoFullName) (*SourceAuthBranchTagQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceAuthTagQuery not implemented")
}
func (UnimplementedSuiteServer) SourceAuthCommitQuery(context.Context, *SourceAuthRepoFullName) (*SourceAuthCommitQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceAuthCommitQuery not implemented")
}
func (UnimplementedSuiteServer) SourceAuthWebhookCreate(context.Context, *SourceAuthWebhook) (*SourceAuthWebhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceAuthWebhookCreate not implemented")
}
func (UnimplementedSuiteServer) SourceAuthWebhookUpdate(context.Context, *SourceAuthWebhook) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceAuthWebhookUpdate not implemented")
}
func (UnimplementedSuiteServer) SourceAuthWebhookDelete(context.Context, *SourceAuthWebhook) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceAuthWebhookDelete not implemented")
}
func (UnimplementedSuiteServer) SourceScan(*SourceScanParam, Suite_SourceScanServer) error {
	return status.Errorf(codes.Unimplemented, "method SourceScan not implemented")
}
func (UnimplementedSuiteServer) Config(context.Context, *ConfigParams) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedSuiteServer) TestRun(*TestRunParam, Suite_TestRunServer) error {
	return status.Errorf(codes.Unimplemented, "method TestRun not implemented")
}
func (UnimplementedSuiteServer) TestCancel(context.Context, *TestCancelParam) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestCancel not implemented")
}
func (UnimplementedSuiteServer) Build(*BuildParam, Suite_BuildServer) error {
	return status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedSuiteServer) BuildMachine(Suite_BuildMachineServer) error {
	return status.Errorf(codes.Unimplemented, "method BuildMachine not implemented")
}
func (UnimplementedSuiteServer) ImageBuild(*ImageBuildParam, Suite_ImageBuildServer) error {
	return status.Errorf(codes.Unimplemented, "method ImageBuild not implemented")
}
func (UnimplementedSuiteServer) Deploy(*DeployParam, Suite_DeployServer) error {
	return status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedSuiteServer) Version(context.Context, *VersionParam) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedSuiteServer) Notify(context.Context, *NotifyParam) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedSuiteServer) ApprovalSend(context.Context, *ApprovalSendParam) (*ApprovalSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovalSend not implemented")
}
func (UnimplementedSuiteServer) ApprovalCancel(context.Context, *ApprovalCancelParam) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovalCancel not implemented")
}
func (UnimplementedSuiteServer) StorageUploadStream(Suite_StorageUploadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StorageUploadStream not implemented")
}
func (UnimplementedSuiteServer) StorageUploadFile(context.Context, *StorageUploadFileParam) (*StorageUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageUploadFile not implemented")
}
func (UnimplementedSuiteServer) StorageDelete(context.Context, *StorageDeleteParam) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageDelete not implemented")
}
func (UnimplementedSuiteServer) ProductUploadStream(Suite_ProductUploadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ProductUploadStream not implemented")
}
func (UnimplementedSuiteServer) ProductUploadFile(context.Context, *ProductUploadFileParam) (*ProductUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductUploadFile not implemented")
}
func (UnimplementedSuiteServer) ProductDelete(context.Context, *ProductDeleteParam) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDelete not implemented")
}
func (UnimplementedSuiteServer) ShellExec(Suite_ShellExecServer) error {
	return status.Errorf(codes.Unimplemented, "method ShellExec not implemented")
}
func (UnimplementedSuiteServer) Issues(context.Context, *IssuesParam) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issues not implemented")
}
func (UnimplementedSuiteServer) OrgSync(context.Context, *OrgParam) (*OrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrgSync not implemented")
}
func (UnimplementedSuiteServer) OrgUserSync(context.Context, *OrgUserParam) (*OrgUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrgUserSync not implemented")
}
func (UnimplementedSuiteServer) Custom(*CustomParam, Suite_CustomServer) error {
	return status.Errorf(codes.Unimplemented, "method Custom not implemented")
}
func (UnimplementedSuiteServer) PipeRun(context.Context, *PipelineRunParam) (*PipelineRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipeRun not implemented")
}
func (UnimplementedSuiteServer) PipeCancel(context.Context, *PipelineCancelParam) (*OutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipeCancel not implemented")
}
func (UnimplementedSuiteServer) mustEmbedUnimplementedSuiteServer() {}

// UnsafeSuiteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuiteServer will
// result in compilation errors.
type UnsafeSuiteServer interface {
	mustEmbedUnimplementedSuiteServer()
}

func RegisterSuiteServer(s grpc.ServiceRegistrar, srv SuiteServer) {
	s.RegisterService(&Suite_ServiceDesc, srv)
}

func _Suite_Inject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).Inject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_Inject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).Inject(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_InjectConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.JsonString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).InjectConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_InjectConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).InjectConfig(ctx, req.(*base.JsonString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuiteApiOptionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_Options_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).Options(ctx, req.(*SuiteApiOptionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceClone_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SourcePullCloneParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SuiteServer).SourceClone(m, &suiteSourceCloneServer{stream})
}

type Suite_SourceCloneServer interface {
	Send(*SourcePullResponse) error
	grpc.ServerStream
}

type suiteSourceCloneServer struct {
	grpc.ServerStream
}

func (x *suiteSourceCloneServer) Send(m *SourcePullResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Suite_SourceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourcePullCreateParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceCreate(ctx, req.(*SourcePullCreateParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourcePullMergeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceMerge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceMerge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceMerge(ctx, req.(*SourcePullMergeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceAuthTypeOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceAuthTypeOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceAuthTypeOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceAuthTypeOptions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceAuthUri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceAuthParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceAuthUri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceAuthUri_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceAuthUri(ctx, req.(*SourceAuthParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceAuthAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceAuthParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceAuthAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceAuthAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceAuthAccessToken(ctx, req.(*SourceAuthParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceAuthRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceAuthTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceAuthRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceAuthRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceAuthRefreshToken(ctx, req.(*SourceAuthTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceAuthSSHCredentialCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceAuthSSHCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceAuthSSHCredentialCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceAuthSSHCredentialCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceAuthSSHCredentialCreate(ctx, req.(*SourceAuthSSHCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceAuthSSHCredentialDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceAuthSSHCredentialId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceAuthSSHCredentialDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceAuthSSHCredentialDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceAuthSSHCredentialDelete(ctx, req.(*SourceAuthSSHCredentialId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceAuthRepoQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceAuthRepoQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceAuthRepoQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceAuthRepoQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceAuthRepoQuery(ctx, req.(*SourceAuthRepoQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceAuthBranchQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceAuthRepoFullName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceAuthBranchQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceAuthBranchQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceAuthBranchQuery(ctx, req.(*SourceAuthRepoFullName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceAuthTagQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceAuthRepoFullName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceAuthTagQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceAuthTagQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceAuthTagQuery(ctx, req.(*SourceAuthRepoFullName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceAuthCommitQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceAuthRepoFullName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceAuthCommitQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceAuthCommitQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceAuthCommitQuery(ctx, req.(*SourceAuthRepoFullName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceAuthWebhookCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceAuthWebhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceAuthWebhookCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceAuthWebhookCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceAuthWebhookCreate(ctx, req.(*SourceAuthWebhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceAuthWebhookUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceAuthWebhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceAuthWebhookUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceAuthWebhookUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceAuthWebhookUpdate(ctx, req.(*SourceAuthWebhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceAuthWebhookDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceAuthWebhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).SourceAuthWebhookDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_SourceAuthWebhookDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).SourceAuthWebhookDelete(ctx, req.(*SourceAuthWebhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_SourceScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SourceScanParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SuiteServer).SourceScan(m, &suiteSourceScanServer{stream})
}

type Suite_SourceScanServer interface {
	Send(*SourceScanResponse) error
	grpc.ServerStream
}

type suiteSourceScanServer struct {
	grpc.ServerStream
}

func (x *suiteSourceScanServer) Send(m *SourceScanResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Suite_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_Config_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).Config(ctx, req.(*ConfigParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_TestRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestRunParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SuiteServer).TestRun(m, &suiteTestRunServer{stream})
}

type Suite_TestRunServer interface {
	Send(*TestRunResponse) error
	grpc.ServerStream
}

type suiteTestRunServer struct {
	grpc.ServerStream
}

func (x *suiteTestRunServer) Send(m *TestRunResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Suite_TestCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCancelParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).TestCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_TestCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).TestCancel(ctx, req.(*TestCancelParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_Build_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SuiteServer).Build(m, &suiteBuildServer{stream})
}

type Suite_BuildServer interface {
	Send(*BuildResponse) error
	grpc.ServerStream
}

type suiteBuildServer struct {
	grpc.ServerStream
}

func (x *suiteBuildServer) Send(m *BuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Suite_BuildMachine_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SuiteServer).BuildMachine(&suiteBuildMachineServer{stream})
}

type Suite_BuildMachineServer interface {
	Send(*BuildMachineParam) error
	Recv() (*BuildMachineResponse, error)
	grpc.ServerStream
}

type suiteBuildMachineServer struct {
	grpc.ServerStream
}

func (x *suiteBuildMachineServer) Send(m *BuildMachineParam) error {
	return x.ServerStream.SendMsg(m)
}

func (x *suiteBuildMachineServer) Recv() (*BuildMachineResponse, error) {
	m := new(BuildMachineResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Suite_ImageBuild_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImageBuildParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SuiteServer).ImageBuild(m, &suiteImageBuildServer{stream})
}

type Suite_ImageBuildServer interface {
	Send(*ImageBuildResponse) error
	grpc.ServerStream
}

type suiteImageBuildServer struct {
	grpc.ServerStream
}

func (x *suiteImageBuildServer) Send(m *ImageBuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Suite_Deploy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SuiteServer).Deploy(m, &suiteDeployServer{stream})
}

type Suite_DeployServer interface {
	Send(*DeployResponse) error
	grpc.ServerStream
}

type suiteDeployServer struct {
	grpc.ServerStream
}

func (x *suiteDeployServer) Send(m *DeployResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Suite_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).Version(ctx, req.(*VersionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).Notify(ctx, req.(*NotifyParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_ApprovalSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalSendParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).ApprovalSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_ApprovalSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).ApprovalSend(ctx, req.(*ApprovalSendParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_ApprovalCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalCancelParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).ApprovalCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_ApprovalCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).ApprovalCancel(ctx, req.(*ApprovalCancelParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_StorageUploadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SuiteServer).StorageUploadStream(&suiteStorageUploadStreamServer{stream})
}

type Suite_StorageUploadStreamServer interface {
	Send(*StorageUploadResponse) error
	Recv() (*StorageUploadStreamParam, error)
	grpc.ServerStream
}

type suiteStorageUploadStreamServer struct {
	grpc.ServerStream
}

func (x *suiteStorageUploadStreamServer) Send(m *StorageUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *suiteStorageUploadStreamServer) Recv() (*StorageUploadStreamParam, error) {
	m := new(StorageUploadStreamParam)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Suite_StorageUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageUploadFileParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).StorageUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_StorageUploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).StorageUploadFile(ctx, req.(*StorageUploadFileParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_StorageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageDeleteParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).StorageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_StorageDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).StorageDelete(ctx, req.(*StorageDeleteParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_ProductUploadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SuiteServer).ProductUploadStream(&suiteProductUploadStreamServer{stream})
}

type Suite_ProductUploadStreamServer interface {
	Send(*ProductUploadResponse) error
	Recv() (*ProductUploadStreamParam, error)
	grpc.ServerStream
}

type suiteProductUploadStreamServer struct {
	grpc.ServerStream
}

func (x *suiteProductUploadStreamServer) Send(m *ProductUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *suiteProductUploadStreamServer) Recv() (*ProductUploadStreamParam, error) {
	m := new(ProductUploadStreamParam)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Suite_ProductUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductUploadFileParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).ProductUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_ProductUploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).ProductUploadFile(ctx, req.(*ProductUploadFileParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_ProductDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDeleteParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).ProductDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_ProductDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).ProductDelete(ctx, req.(*ProductDeleteParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_ShellExec_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SuiteServer).ShellExec(&suiteShellExecServer{stream})
}

type Suite_ShellExecServer interface {
	Send(*ShellExecResponse) error
	Recv() (*ShellExecParam, error)
	grpc.ServerStream
}

type suiteShellExecServer struct {
	grpc.ServerStream
}

func (x *suiteShellExecServer) Send(m *ShellExecResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *suiteShellExecServer) Recv() (*ShellExecParam, error) {
	m := new(ShellExecParam)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Suite_Issues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssuesParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).Issues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_Issues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).Issues(ctx, req.(*IssuesParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_OrgSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).OrgSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_OrgSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).OrgSync(ctx, req.(*OrgParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_OrgUserSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgUserParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).OrgUserSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_OrgUserSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).OrgUserSync(ctx, req.(*OrgUserParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_Custom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CustomParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SuiteServer).Custom(m, &suiteCustomServer{stream})
}

type Suite_CustomServer interface {
	Send(*CustomResponse) error
	grpc.ServerStream
}

type suiteCustomServer struct {
	grpc.ServerStream
}

func (x *suiteCustomServer) Send(m *CustomResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Suite_PipeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineRunParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).PipeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_PipeRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).PipeRun(ctx, req.(*PipelineRunParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suite_PipeCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineCancelParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServer).PipeCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suite_PipeCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServer).PipeCancel(ctx, req.(*PipelineCancelParam))
	}
	return interceptor(ctx, in, info, handler)
}

// Suite_ServiceDesc is the grpc.ServiceDesc for Suite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Suite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meta.v1.suite.Suite",
	HandlerType: (*SuiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inject",
			Handler:    _Suite_Inject_Handler,
		},
		{
			MethodName: "InjectConfig",
			Handler:    _Suite_InjectConfig_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _Suite_Options_Handler,
		},
		{
			MethodName: "SourceCreate",
			Handler:    _Suite_SourceCreate_Handler,
		},
		{
			MethodName: "SourceMerge",
			Handler:    _Suite_SourceMerge_Handler,
		},
		{
			MethodName: "SourceAuthTypeOptions",
			Handler:    _Suite_SourceAuthTypeOptions_Handler,
		},
		{
			MethodName: "SourceAuthUri",
			Handler:    _Suite_SourceAuthUri_Handler,
		},
		{
			MethodName: "SourceAuthAccessToken",
			Handler:    _Suite_SourceAuthAccessToken_Handler,
		},
		{
			MethodName: "SourceAuthRefreshToken",
			Handler:    _Suite_SourceAuthRefreshToken_Handler,
		},
		{
			MethodName: "SourceAuthSSHCredentialCreate",
			Handler:    _Suite_SourceAuthSSHCredentialCreate_Handler,
		},
		{
			MethodName: "SourceAuthSSHCredentialDelete",
			Handler:    _Suite_SourceAuthSSHCredentialDelete_Handler,
		},
		{
			MethodName: "SourceAuthRepoQuery",
			Handler:    _Suite_SourceAuthRepoQuery_Handler,
		},
		{
			MethodName: "SourceAuthBranchQuery",
			Handler:    _Suite_SourceAuthBranchQuery_Handler,
		},
		{
			MethodName: "SourceAuthTagQuery",
			Handler:    _Suite_SourceAuthTagQuery_Handler,
		},
		{
			MethodName: "SourceAuthCommitQuery",
			Handler:    _Suite_SourceAuthCommitQuery_Handler,
		},
		{
			MethodName: "SourceAuthWebhookCreate",
			Handler:    _Suite_SourceAuthWebhookCreate_Handler,
		},
		{
			MethodName: "SourceAuthWebhookUpdate",
			Handler:    _Suite_SourceAuthWebhookUpdate_Handler,
		},
		{
			MethodName: "SourceAuthWebhookDelete",
			Handler:    _Suite_SourceAuthWebhookDelete_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _Suite_Config_Handler,
		},
		{
			MethodName: "TestCancel",
			Handler:    _Suite_TestCancel_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Suite_Version_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Suite_Notify_Handler,
		},
		{
			MethodName: "ApprovalSend",
			Handler:    _Suite_ApprovalSend_Handler,
		},
		{
			MethodName: "ApprovalCancel",
			Handler:    _Suite_ApprovalCancel_Handler,
		},
		{
			MethodName: "StorageUploadFile",
			Handler:    _Suite_StorageUploadFile_Handler,
		},
		{
			MethodName: "StorageDelete",
			Handler:    _Suite_StorageDelete_Handler,
		},
		{
			MethodName: "ProductUploadFile",
			Handler:    _Suite_ProductUploadFile_Handler,
		},
		{
			MethodName: "ProductDelete",
			Handler:    _Suite_ProductDelete_Handler,
		},
		{
			MethodName: "Issues",
			Handler:    _Suite_Issues_Handler,
		},
		{
			MethodName: "OrgSync",
			Handler:    _Suite_OrgSync_Handler,
		},
		{
			MethodName: "OrgUserSync",
			Handler:    _Suite_OrgUserSync_Handler,
		},
		{
			MethodName: "PipeRun",
			Handler:    _Suite_PipeRun_Handler,
		},
		{
			MethodName: "PipeCancel",
			Handler:    _Suite_PipeCancel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SourceClone",
			Handler:       _Suite_SourceClone_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SourceScan",
			Handler:       _Suite_SourceScan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TestRun",
			Handler:       _Suite_TestRun_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Build",
			Handler:       _Suite_Build_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildMachine",
			Handler:       _Suite_BuildMachine_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ImageBuild",
			Handler:       _Suite_ImageBuild_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Deploy",
			Handler:       _Suite_Deploy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StorageUploadStream",
			Handler:       _Suite_StorageUploadStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProductUploadStream",
			Handler:       _Suite_ProductUploadStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ShellExec",
			Handler:       _Suite_ShellExec_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Custom",
			Handler:       _Suite_Custom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/suite/suite.proto",
}
